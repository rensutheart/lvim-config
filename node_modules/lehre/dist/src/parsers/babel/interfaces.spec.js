"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var helper_1 = require("./helper");
var interfaces_1 = require("./interfaces");
describe('interfaces', function () {
    it('getInterfaceDoc', function () {
        var code = "\n    interface Foo {\n      props: Props\n      foo(arg1: string, arg2: number): string\n    }";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var actual = interfaces_1.getInterfaceDoc(ast.program.body[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'interface',
            start: { line: 1, column: 4 },
            end: { line: 4, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 18 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'foo',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 45 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [],
        });
    });
    it('getInterfaceDoc with export', function () {
        var code = "\n    export interface Foo {\n      props: Props\n      foo(arg1: string, arg2: number): string\n    }";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = interfaces_1.getInterfaceDoc(body.declaration, code.split('\n'));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'interface',
            start: { line: 1, column: 11 },
            end: { line: 4, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 18 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'foo',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 45 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [],
        });
    });
    it('getInterfaceDoc with export default', function () {
        var code = "\n    export default interface Foo {\n      props: Props\n      foo(arg1: string, arg2: number): string\n    }";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = interfaces_1.getInterfaceDoc(body.declaration, code.split('\n'));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'interface',
            start: { line: 1, column: 19 },
            end: { line: 4, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 18 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'foo',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 45 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [],
        });
    });
    it('getInterfaceDoc with extends', function () {
        var code = "\n    interface Foo extends Bar {\n      props: Props\n      foo(arg1: string, arg2: number): string\n    }";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var actual = interfaces_1.getInterfaceDoc(ast.program.body[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'interface',
            start: { line: 1, column: 4 },
            end: { line: 4, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 18 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'foo',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 45 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [{ type: 'extends', value: 'Bar' }],
        });
    });
});
