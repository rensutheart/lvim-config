"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var classes_1 = require("./classes");
var helper_1 = require("./helper");
describe('classes', function () {
    it('getClassDoc', function () {
        var code = "\n    class Foo {\n      props: Props\n      constructor(arg1: string, arg2: number) {}\n      render(arg1: string): string {\n      }\n    }";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var actual = classes_1.getClassDoc(ast.program.body[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'class',
            start: { line: 1, column: 4 },
            end: { line: 6, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 18 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'constructor',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 48 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: '',
                },
                {
                    name: 'render',
                    type: 'function',
                    start: { line: 4, column: 6 },
                    end: { line: 5, column: 7 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [],
        });
    });
    it('getClassDoc with export', function () {
        var code = "\n    export class Foo {\n      props: Props\n      constructor(arg1: string, arg2: number) {}\n      render(arg1: string): string {\n      }\n    }";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = classes_1.getClassDoc(body.declaration, code.split('\n'));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'class',
            start: { line: 1, column: 11 },
            end: { line: 6, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 18 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'constructor',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 48 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: '',
                },
                {
                    name: 'render',
                    type: 'function',
                    start: { line: 4, column: 6 },
                    end: { line: 5, column: 7 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [],
        });
    });
    it('getClassDoc with export default', function () {
        var code = "\n    export default class Foo {\n      props: Props\n      constructor(arg1: string, arg2: number) {}\n      render(arg1: string): string {\n      }\n    }";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = classes_1.getClassDoc(body.declaration, code.split('\n'));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'class',
            start: { line: 1, column: 19 },
            end: { line: 6, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 18 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'constructor',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 48 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: '',
                },
                {
                    name: 'render',
                    type: 'function',
                    start: { line: 4, column: 6 },
                    end: { line: 5, column: 7 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [],
        });
    });
    it('getClassDoc with private', function () {
        var code = "\n    class Foo {\n      private props: Props\n      constructor(arg1: string, arg2: number) {}\n      private render(arg1: string): string {\n      }\n    }";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var actual = classes_1.getClassDoc(ast.program.body[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'class',
            start: { line: 1, column: 4 },
            end: { line: 6, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 26 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'constructor',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 48 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: '',
                },
                {
                    name: 'render',
                    type: 'function',
                    start: { line: 4, column: 6 },
                    end: { line: 5, column: 7 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [],
        });
    });
    it('getClassDoc with arrow-function', function () {
        var code = "\n    class Foo {\n      private props: Props\n      constructor(arg1: string, arg2: number) {}\n      render = (arg1: string): string => {\n      }\n    }";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var actual = classes_1.getClassDoc(ast.program.body[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'class',
            start: { line: 1, column: 4 },
            end: { line: 6, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 26 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'constructor',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 48 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: '',
                },
                {
                    name: 'render',
                    type: 'function',
                    start: { line: 4, column: 6 },
                    end: { line: 5, column: 7 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [],
        });
    });
    it('getClassDoc with extends', function () {
        var code = "\n    class Foo extends Bar {\n      props: Props\n      constructor(arg1: string, arg2: number) {}\n      render(arg1: string): string {\n      }\n    }";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var actual = classes_1.getClassDoc(ast.program.body[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'class',
            start: { line: 1, column: 4 },
            end: { line: 6, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 18 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'constructor',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 48 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: '',
                },
                {
                    name: 'render',
                    type: 'function',
                    start: { line: 4, column: 6 },
                    end: { line: 5, column: 7 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [{ type: 'extends', value: 'Bar' }],
        });
    });
    it('getClassDoc with implements', function () {
        var code = "\n    class Foo implements Bar, Baz {\n      props: Props\n      constructor(arg1: string, arg2: number) {}\n      render(arg1: string): string {\n      }\n    }";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var actual = classes_1.getClassDoc(ast.program.body[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'class',
            start: { line: 1, column: 4 },
            end: { line: 6, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 18 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'constructor',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 48 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: '',
                },
                {
                    name: 'render',
                    type: 'function',
                    start: { line: 4, column: 6 },
                    end: { line: 5, column: 7 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [
                { type: 'implements', value: 'Bar' },
                { type: 'implements', value: 'Baz' },
            ],
        });
    });
    it('getClassDoc with implements and extends', function () {
        var code = "\n    class Foo extends Base implements Bar, Baz {\n      props: Props\n      constructor(arg1: string, arg2: number) {}\n      render(arg1: string): string {\n      }\n    }";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var actual = classes_1.getClassDoc(ast.program.body[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'class',
            start: { line: 1, column: 4 },
            end: { line: 6, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 18 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'constructor',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 48 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: '',
                },
                {
                    name: 'render',
                    type: 'function',
                    start: { line: 4, column: 6 },
                    end: { line: 5, column: 7 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [
                { type: 'implements', value: 'Bar' },
                { type: 'implements', value: 'Baz' },
                { type: 'extends', value: 'Base' },
            ],
        });
    });
});
