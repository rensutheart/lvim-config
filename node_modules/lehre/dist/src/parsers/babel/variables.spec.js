"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var helper_1 = require("./helper");
var variables_1 = require("./variables");
describe('variables', function () {
    it('getVariableDoc', function () {
        var code = "const foo = () => {}";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = variables_1.getVariableDoc(body.declarations[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'foo',
            type: 'function',
            start: { line: 0, column: 6 },
            end: { line: 0, column: 20 },
            params: [],
            returnType: '',
        });
    });
    it('getVariableDoc with args', function () {
        var code = "const foo = (arg1: string, arg2: number) => {}";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = variables_1.getVariableDoc(body.declarations[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'foo',
            type: 'function',
            start: { line: 0, column: 6 },
            end: { line: 0, column: 46 },
            params: [
                {
                    name: 'arg1',
                    type: 'string',
                    default: '',
                    alias: 'string',
                },
                {
                    name: 'arg2',
                    type: 'number',
                    default: '',
                    alias: 'number',
                },
            ],
            returnType: '',
        });
    });
    it('getFunctionDoc with return type', function () {
        var code = "const foo = (arg1: string, arg2: number): number => {}";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = variables_1.getVariableDoc(body.declarations[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'foo',
            type: 'function',
            start: { line: 0, column: 6 },
            end: { line: 0, column: 54 },
            params: [
                {
                    name: 'arg1',
                    type: 'string',
                    default: '',
                    alias: 'string',
                },
                {
                    name: 'arg2',
                    type: 'number',
                    default: '',
                    alias: 'number',
                },
            ],
            returnType: 'number',
        });
    });
    it('getVariableDoc with default parameter', function () {
        var code = "const foo = (arg1: string = 'foo', arg2: number = 100): number => {}";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = variables_1.getVariableDoc(body.declarations[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'foo',
            type: 'function',
            start: { line: 0, column: 6 },
            end: { line: 0, column: 68 },
            params: [
                {
                    name: 'arg1',
                    type: 'string',
                    default: "'foo'",
                    alias: 'string',
                },
                {
                    name: 'arg2',
                    type: 'number',
                    default: '100',
                    alias: 'number',
                },
            ],
            returnType: 'number',
        });
    });
    it('getVariableDoc with alias', function () {
        var code = "const foo = (arg1: string, arg2: { foo: number }) => {}";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = variables_1.getVariableDoc(body.declarations[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'foo',
            type: 'function',
            start: { line: 0, column: 6 },
            end: { line: 0, column: 55 },
            params: [
                {
                    name: 'arg1',
                    type: 'string',
                    default: '',
                    alias: 'string',
                },
                {
                    name: 'arg2',
                    type: '{ foo: number }',
                    default: '',
                    alias: 'Object',
                },
            ],
            returnType: '',
        });
    });
});
