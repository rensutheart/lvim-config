"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInterfaceDoc = void 0;
var helper_1 = require("./helper");
var parameters_1 = require("./parameters");
var getInterfaceDoc = function (node, lines) {
    var interfaceBody = node.body;
    var methods = interfaceBody.body.map(function (i) {
        var _a = helper_1.getLocation(i), start = _a.start, end = _a.end;
        var doc = {
            name: '',
            type: '',
            start: start,
            end: end,
            returnType: '',
            params: [],
        };
        switch (i.type) {
            case 'TSPropertySignature':
                doc.name = i.key.name;
                doc.type = 'property';
                if (i.typeAnnotation) {
                    doc.returnType = parameters_1.getType(i.typeAnnotation.typeAnnotation, lines).type;
                }
                break;
            case 'TSMethodSignature':
                doc.name = i.key.name;
                doc.type = 'function';
                doc.params = i.parameters.map(function (param) {
                    return parameters_1.getParameter(param, lines);
                });
                if (i.typeAnnotation) {
                    doc.returnType = parameters_1.getType(i.typeAnnotation.typeAnnotation, lines).type;
                }
                break;
        }
        return doc;
    });
    var _a = helper_1.getLocation(node), start = _a.start, end = _a.end;
    var heritageClauses = [];
    var doc = {
        name: node.id.name,
        type: 'interface',
        start: start,
        end: end,
        methods: methods,
        heritageClauses: heritageClauses,
    };
    if (node.extends) {
        var superClasses = node.extends
            ? node.extends
            : [];
        doc.heritageClauses = superClasses.map(function (impl) { return ({
            type: 'extends',
            value: impl.expression.name,
        }); });
    }
    return doc;
};
exports.getInterfaceDoc = getInterfaceDoc;
