"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var helper_1 = require("./helper");
var parameters_1 = require("./parameters");
describe('parameters', function () {
    it('getParameter with string type', function () {
        var code = "const foo = (arg1: string) => {}";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = parameters_1.getParameter(body.declarations[0].init.params[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'arg1',
            type: 'string',
            default: '',
            alias: 'string',
        });
    });
    it('getParameter with number type', function () {
        var code = "const foo = (arg1: number) => {}";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = parameters_1.getParameter(body.declarations[0].init.params[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'arg1',
            type: 'number',
            default: '',
            alias: 'number',
        });
    });
    it('getParameter with boolean type', function () {
        var code = "const foo = (arg1: boolean) => {}";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = parameters_1.getParameter(body.declarations[0].init.params[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'arg1',
            type: 'boolean',
            default: '',
            alias: 'boolean',
        });
    });
    it('getParameter with any type', function () {
        var code = "const foo = (arg1: any) => {}";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = parameters_1.getParameter(body.declarations[0].init.params[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'arg1',
            type: 'any',
            default: '',
            alias: 'any',
        });
    });
    it('getParameter with array', function () {
        var code = "const foo = (arg1: Array<number>) => {}";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = parameters_1.getParameter(body.declarations[0].init.params[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'arg1',
            type: 'Array<number>',
            default: '',
            alias: '',
        });
    });
    it('getParameter with object', function () {
        var code = "const foo = (arg1: { foo: string }) => {}";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = parameters_1.getParameter(body.declarations[0].init.params[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'arg1',
            type: '{ foo: string }',
            default: '',
            alias: 'Object',
        });
    });
    it('getParameter with function', function () {
        var code = "const foo = (arg1: (arg1: string) => string) => {}";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = parameters_1.getParameter(body.declarations[0].init.params[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'arg1',
            type: '(arg1: string) => string',
            default: '',
            alias: 'Function',
        });
    });
    it('getParameter with type', function () {
        var code = "const foo = (arg1: Foo) => {}";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = parameters_1.getParameter(body.declarations[0].init.params[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'arg1',
            type: 'Foo',
            default: '',
            alias: '',
        });
    });
    it('getParameter with class', function () {
        var code = "const foo = (arg1: new () => T) => {}";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = parameters_1.getParameter(body.declarations[0].init.params[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'arg1',
            type: 'new () => T',
            default: '',
            alias: 'Class',
        });
    });
    it('getParameter with union', function () {
        var code = "const foo = (arg1: number | string) => {}";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = parameters_1.getParameter(body.declarations[0].init.params[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'arg1',
            type: 'number | string',
            default: '',
            alias: '',
        });
    });
    it('getParameter with default', function () {
        var code = "const foo = (arg1: number = 100) => {}";
        var ast = helper_1.getAst(code);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var body = ast.program.body[0];
        var actual = parameters_1.getParameter(body.declarations[0].init.params[0], code.split('\n'));
        expect(actual).toEqual({
            name: 'arg1',
            type: 'number',
            default: '100',
            alias: 'number',
        });
    });
});
