"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = require("typescript");
var functions_1 = require("./functions");
describe('functions', function () {
    it('getFunctionDoc', function () {
        var code = "\n    function foo() {\n    }\n    ";
        var source = typescript_1.createSourceFile('lehre.ts', code, typescript_1.ScriptTarget.ESNext, false, typescript_1.ScriptKind.TS);
        var actual = functions_1.getFunctionDoc(source.statements[0], source);
        expect(actual).toEqual({
            name: 'foo',
            type: 'function',
            start: { line: 1, column: 4 },
            end: { line: 2, column: 5 },
            params: [],
            returnType: '',
        });
    });
    it('getFunctionDoc with args', function () {
        var code = "\n    function foo(arg1: string, arg2: number) {\n    }\n    ";
        var source = typescript_1.createSourceFile('lehre.ts', code, typescript_1.ScriptTarget.ESNext, false, typescript_1.ScriptKind.TS);
        var actual = functions_1.getFunctionDoc(source.statements[0], source);
        expect(actual).toEqual({
            name: 'foo',
            type: 'function',
            start: { line: 1, column: 4 },
            end: { line: 2, column: 5 },
            params: [
                {
                    name: 'arg1',
                    type: 'string',
                    default: '',
                    alias: 'string',
                },
                {
                    name: 'arg2',
                    type: 'number',
                    default: '',
                    alias: 'number',
                },
            ],
            returnType: '',
        });
    });
    it('getFunctionDoc with return type', function () {
        var code = "\n    function foo(arg1: string, arg2: number): number {\n    }\n    ";
        var source = typescript_1.createSourceFile('lehre.ts', code, typescript_1.ScriptTarget.ESNext, false, typescript_1.ScriptKind.TS);
        var actual = functions_1.getFunctionDoc(source.statements[0], source);
        expect(actual).toEqual({
            name: 'foo',
            type: 'function',
            start: { line: 1, column: 4 },
            end: { line: 2, column: 5 },
            params: [
                {
                    name: 'arg1',
                    type: 'string',
                    default: '',
                    alias: 'string',
                },
                {
                    name: 'arg2',
                    type: 'number',
                    default: '',
                    alias: 'number',
                },
            ],
            returnType: 'number',
        });
    });
    it('getFunctionDoc with default parameter', function () {
        var code = "\n    function foo(arg1: string = 'foo', arg2: number = 100): number {\n    }\n    ";
        var source = typescript_1.createSourceFile('lehre.ts', code, typescript_1.ScriptTarget.ESNext, false, typescript_1.ScriptKind.TS);
        var actual = functions_1.getFunctionDoc(source.statements[0], source);
        expect(actual).toEqual({
            name: 'foo',
            type: 'function',
            start: { line: 1, column: 4 },
            end: { line: 2, column: 5 },
            params: [
                {
                    name: 'arg1',
                    type: 'string',
                    default: "'foo'",
                    alias: 'string',
                },
                {
                    name: 'arg2',
                    type: 'number',
                    default: '100',
                    alias: 'number',
                },
            ],
            returnType: 'number',
        });
    });
    it('getFunctionDoc with alias', function () {
        var code = "\n    function foo(arg1: string, arg2: { foo: number }) {\n    }\n    ";
        var source = typescript_1.createSourceFile('lehre.ts', code, typescript_1.ScriptTarget.ESNext, false, typescript_1.ScriptKind.TS);
        var actual = functions_1.getFunctionDoc(source.statements[0], source);
        expect(actual).toEqual({
            name: 'foo',
            type: 'function',
            start: { line: 1, column: 4 },
            end: { line: 2, column: 5 },
            params: [
                {
                    name: 'arg1',
                    type: 'string',
                    default: '',
                    alias: 'string',
                },
                {
                    name: 'arg2',
                    type: '{ foo: number }',
                    default: '',
                    alias: 'Object',
                },
            ],
            returnType: '',
        });
    });
});
