"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = require("typescript");
var parameters_1 = require("./parameters");
var getInitializer = function (code) {
    var source = typescript_1.createSourceFile('lehre.ts', code, typescript_1.ScriptTarget.ESNext, false, typescript_1.ScriptKind.TS);
    var statement = source.statements[0];
    var initializer = statement.declarationList.declarations[0].initializer;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return { parameters: initializer.parameters, source: source };
};
describe('parameters', function () {
    it('getParameter with string type', function () {
        var code = "const foo = (arg1: string) => {}";
        var _a = getInitializer(code), source = _a.source, parameters = _a.parameters;
        var actual = parameters_1.getParameter(parameters[0], source);
        expect(actual).toEqual({
            name: 'arg1',
            type: 'string',
            default: '',
            alias: 'string',
        });
    });
    it('getParameter with number type', function () {
        var code = "const foo = (arg1: number) => {}";
        var _a = getInitializer(code), source = _a.source, parameters = _a.parameters;
        var actual = parameters_1.getParameter(parameters[0], source);
        expect(actual).toEqual({
            name: 'arg1',
            type: 'number',
            default: '',
            alias: 'number',
        });
    });
    it('getParameter with boolean type', function () {
        var code = "const foo = (arg1: boolean) => {}";
        var _a = getInitializer(code), source = _a.source, parameters = _a.parameters;
        var actual = parameters_1.getParameter(parameters[0], source);
        expect(actual).toEqual({
            name: 'arg1',
            type: 'boolean',
            default: '',
            alias: 'boolean',
        });
    });
    it('getParameter with any type', function () {
        var code = "const foo = (arg1: any) => {}";
        var _a = getInitializer(code), source = _a.source, parameters = _a.parameters;
        var actual = parameters_1.getParameter(parameters[0], source);
        expect(actual).toEqual({
            name: 'arg1',
            type: 'any',
            default: '',
            alias: 'any',
        });
    });
    it('getParameter with array', function () {
        var code = "const foo = (arg1: Array<number>) => {}";
        var _a = getInitializer(code), source = _a.source, parameters = _a.parameters;
        var actual = parameters_1.getParameter(parameters[0], source);
        expect(actual).toEqual({
            name: 'arg1',
            type: 'Array',
            default: '',
            alias: '',
        });
    });
    it('getParameter with object', function () {
        var code = "const foo = (arg1: { foo: string }) => {}";
        var _a = getInitializer(code), source = _a.source, parameters = _a.parameters;
        var actual = parameters_1.getParameter(parameters[0], source);
        expect(actual).toEqual({
            name: 'arg1',
            type: '{ foo: string }',
            default: '',
            alias: 'Object',
        });
    });
    it('getParameter with function', function () {
        var code = "const foo = (arg1: (arg1: string) => string) => {}";
        var _a = getInitializer(code), source = _a.source, parameters = _a.parameters;
        var actual = parameters_1.getParameter(parameters[0], source);
        expect(actual).toEqual({
            name: 'arg1',
            type: '(arg1: string) => string',
            default: '',
            alias: 'Function',
        });
    });
    it('getParameter with type', function () {
        var code = "const foo = (arg1: Foo) => {}";
        var _a = getInitializer(code), source = _a.source, parameters = _a.parameters;
        var actual = parameters_1.getParameter(parameters[0], source);
        expect(actual).toEqual({
            name: 'arg1',
            type: 'Foo',
            default: '',
            alias: '',
        });
    });
    it('getParameter with class', function () {
        var code = "const foo = (arg1: new () => T) => {}";
        var _a = getInitializer(code), source = _a.source, parameters = _a.parameters;
        var actual = parameters_1.getParameter(parameters[0], source);
        expect(actual).toEqual({
            name: 'arg1',
            type: 'new () => T',
            default: '',
            alias: 'Class',
        });
    });
    it('getParameter with union', function () {
        var code = "const foo = (arg1: number | string) => {}";
        var _a = getInitializer(code), source = _a.source, parameters = _a.parameters;
        var actual = parameters_1.getParameter(parameters[0], source);
        expect(actual).toEqual({
            name: 'arg1',
            type: 'number | string',
            default: '',
            alias: '',
        });
    });
    it('getParameter with default', function () {
        var code = "const foo = (arg1: number = 100) => {}";
        var _a = getInitializer(code), source = _a.source, parameters = _a.parameters;
        var actual = parameters_1.getParameter(parameters[0], source);
        expect(actual).toEqual({
            name: 'arg1',
            type: 'number',
            default: '100',
            alias: 'number',
        });
    });
});
