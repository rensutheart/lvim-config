"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = require("typescript");
var _1 = require(".");
var classes_1 = require("./classes");
describe('classes', function () {
    it('getClassDoc', function () {
        var code = "\n    class Foo {\n      props: Props\n      constructor(arg1: string, arg2: number) {}\n      render(arg1: string): string {\n      }\n    }";
        var source = typescript_1.createSourceFile('lehre.ts', code, typescript_1.ScriptTarget.ESNext, false, typescript_1.ScriptKind.TS);
        var actual = classes_1.getClassLikeDoc(source.statements[0], source, _1.getLineAndPosition(code.split('\n')));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'class',
            start: { line: 1, column: 4 },
            end: { line: 6, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 18 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'constructor',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 48 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: '',
                },
                {
                    name: 'render',
                    type: 'function',
                    start: { line: 4, column: 6 },
                    end: { line: 5, column: 7 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [],
        });
    });
    it('getClassDoc with private', function () {
        var code = "\n    class Foo {\n      private props: Props\n      constructor(arg1: string, arg2: number) {}\n      private render(arg1: string): string {\n      }\n    }";
        var source = typescript_1.createSourceFile('lehre.ts', code, typescript_1.ScriptTarget.ESNext, false, typescript_1.ScriptKind.TS);
        var actual = classes_1.getClassLikeDoc(source.statements[0], source, _1.getLineAndPosition(code.split('\n')));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'class',
            start: { line: 1, column: 4 },
            end: { line: 6, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 26 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'constructor',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 48 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: '',
                },
                {
                    name: 'render',
                    type: 'function',
                    start: { line: 4, column: 6 },
                    end: { line: 5, column: 7 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [],
        });
    });
    it('getClassDoc with arrow function', function () {
        var code = "\n    class Foo {\n      private props: Props\n      constructor(arg1: string, arg2: number) {}\n      render = (arg1: string): string => {\n      }\n    }";
        var source = typescript_1.createSourceFile('lehre.ts', code, typescript_1.ScriptTarget.ESNext, false, typescript_1.ScriptKind.TS);
        var actual = classes_1.getClassLikeDoc(source.statements[0], source, _1.getLineAndPosition(code.split('\n')));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'class',
            start: { line: 1, column: 4 },
            end: { line: 6, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 26 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'constructor',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 48 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: '',
                },
                {
                    name: 'render',
                    type: 'function',
                    start: { line: 4, column: 6 },
                    end: { line: 5, column: 7 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [],
        });
    });
    it('getClassDoc with extends', function () {
        var code = "\n    class Foo extends Bar {\n      props: Props\n      constructor(arg1: string, arg2: number) {}\n      render(arg1: string): string {\n      }\n    }";
        var source = typescript_1.createSourceFile('lehre.ts', code, typescript_1.ScriptTarget.ESNext, false, typescript_1.ScriptKind.TS);
        var actual = classes_1.getClassLikeDoc(source.statements[0], source, _1.getLineAndPosition(code.split('\n')));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'class',
            start: { line: 1, column: 4 },
            end: { line: 6, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 18 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'constructor',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 48 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: '',
                },
                {
                    name: 'render',
                    type: 'function',
                    start: { line: 4, column: 6 },
                    end: { line: 5, column: 7 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [{ type: 'extends', value: 'Bar' }],
        });
    });
    it('getClassDoc with implements', function () {
        var code = "\n    class Foo implements Bar, Baz {\n      props: Props\n      constructor(arg1: string, arg2: number) {}\n      render(arg1: string): string {\n      }\n    }";
        var source = typescript_1.createSourceFile('lehre.ts', code, typescript_1.ScriptTarget.ESNext, false, typescript_1.ScriptKind.TS);
        var actual = classes_1.getClassLikeDoc(source.statements[0], source, _1.getLineAndPosition(code.split('\n')));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'class',
            start: { line: 1, column: 4 },
            end: { line: 6, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 18 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'constructor',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 48 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: '',
                },
                {
                    name: 'render',
                    type: 'function',
                    start: { line: 4, column: 6 },
                    end: { line: 5, column: 7 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [{ type: 'implements', value: 'Bar, Baz' }],
        });
    });
    it('getClassDoc with implements and extends', function () {
        var code = "\n    class Foo extends Base implements Bar, Baz {\n      props: Props\n      constructor(arg1: string, arg2: number) {}\n      render(arg1: string): string {\n      }\n    }";
        var source = typescript_1.createSourceFile('lehre.ts', code, typescript_1.ScriptTarget.ESNext, false, typescript_1.ScriptKind.TS);
        var actual = classes_1.getClassLikeDoc(source.statements[0], source, _1.getLineAndPosition(code.split('\n')));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'class',
            start: { line: 1, column: 4 },
            end: { line: 6, column: 5 },
            methods: [
                {
                    name: 'props',
                    type: 'property',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 18 },
                    params: [],
                    returnType: 'Props',
                },
                {
                    name: 'constructor',
                    type: 'function',
                    start: { line: 3, column: 6 },
                    end: { line: 3, column: 48 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: '',
                },
                {
                    name: 'render',
                    type: 'function',
                    start: { line: 4, column: 6 },
                    end: { line: 5, column: 7 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [
                { type: 'extends', value: 'Base' },
                { type: 'implements', value: 'Bar, Baz' },
            ],
        });
    });
    it('getInterfaceDoc', function () {
        var code = "\n    interface Foo {\n      foo(arg1: string, arg2: number): string\n    }";
        var source = typescript_1.createSourceFile('lehre.ts', code, typescript_1.ScriptTarget.ESNext, false, typescript_1.ScriptKind.TS);
        var actual = classes_1.getClassLikeDoc(source.statements[0], source, _1.getLineAndPosition(code.split('\n')));
        expect(actual).toEqual({
            name: 'Foo',
            type: 'interface',
            start: { line: 1, column: 4 },
            end: { line: 3, column: 5 },
            methods: [
                {
                    name: 'foo',
                    type: 'function',
                    start: { line: 2, column: 6 },
                    end: { line: 2, column: 45 },
                    params: [
                        {
                            name: 'arg1',
                            type: 'string',
                            default: '',
                            alias: 'string',
                        },
                        {
                            name: 'arg2',
                            type: 'number',
                            default: '',
                            alias: 'number',
                        },
                    ],
                    returnType: 'string',
                },
            ],
            heritageClauses: [],
        });
    });
});
