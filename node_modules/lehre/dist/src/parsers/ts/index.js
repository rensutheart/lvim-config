"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = exports.getLineAndPosition = void 0;
var typescript_1 = require("typescript");
var classes_1 = require("./classes");
var expressions_1 = require("./expressions");
var functions_1 = require("./functions");
var types_1 = require("./types");
var variables_1 = require("./variables");
var helpers_1 = require("../helpers");
var getTarget = function (target) {
    switch (target.toLowerCase()) {
        case 'es3':
            return typescript_1.ScriptTarget.ES3;
        case 'es5':
            return typescript_1.ScriptTarget.ES5;
        case 'es2015':
            return typescript_1.ScriptTarget.ES2015;
        case 'es2016':
            return typescript_1.ScriptTarget.ES2016;
        case 'es2017':
            return typescript_1.ScriptTarget.ES2017;
        case 'es2018':
            return typescript_1.ScriptTarget.ES2018;
        case 'es2019':
            return typescript_1.ScriptTarget.ES2019;
        case 'es2020':
            return typescript_1.ScriptTarget.ES2020;
        default:
            return typescript_1.ScriptTarget.ESNext;
    }
};
var getKind = function (kind) {
    switch (kind.toLowerCase()) {
        case 'js':
            return typescript_1.ScriptKind.JS;
        case 'jsx':
            return typescript_1.ScriptKind.JSX;
        case 'tsx':
            return typescript_1.ScriptKind.TSX;
        default:
            return typescript_1.ScriptKind.TS;
    }
};
var getLineAndPosition = function (lines) { return function (lineno) {
    if (lines[lineno]) {
        var line = lines[lineno];
        return { line: lineno, column: line.search(/[A-z0-9_]/) };
    }
    return { line: lineno, column: 0 };
}; };
exports.getLineAndPosition = getLineAndPosition;
var parse = function (_a) {
    var code = _a.code, lines = _a.lines, nest = _a.nest, scriptTarget = _a.scriptTarget, scriptKind = _a.scriptKind;
    var source = typescript_1.createSourceFile('lehre.ts', code, getTarget(scriptTarget || 'esnext'), false, getKind(scriptKind || 'ts'));
    var docs = [];
    var visit = function (node) {
        switch (node.kind) {
            case typescript_1.SyntaxKind.FunctionDeclaration:
                if (helpers_1.has(node, 'jsDoc')) {
                    break;
                }
                if (typescript_1.isFunctionDeclaration(node) && node.name) {
                    docs.push(functions_1.getFunctionDoc(node, source));
                }
                if (!nest) {
                    return;
                }
                break;
            case typescript_1.SyntaxKind.VariableStatement:
                if (helpers_1.has(node, 'jsDoc')) {
                    break;
                }
                if (helpers_1.has(node, 'declarationList')) {
                    var start_1 = source.getLineAndCharacterOfPosition(node.getStart(source));
                    var end_1 = source.getLineAndCharacterOfPosition(node.getEnd());
                    var declarations = node.declarationList
                        .declarations;
                    declarations.forEach(function (d) {
                        var doc = variables_1.getVariableDoc(d, source, { line: start_1.line, column: start_1.character }, { line: end_1.line, column: end_1.character });
                        docs.push(doc);
                    });
                    if (!nest) {
                        return;
                    }
                }
                break;
            case typescript_1.SyntaxKind.TypeAliasDeclaration:
                if (helpers_1.has(node, 'jsDoc')) {
                    break;
                }
                if (typescript_1.isTypeAliasDeclaration(node)) {
                    var typeDoc = types_1.getTypeDoc(node, source);
                    typeDoc.type = 'interface';
                    docs.push(typeDoc);
                    return;
                }
                break;
            case typescript_1.SyntaxKind.InterfaceDeclaration:
                if (helpers_1.has(node, 'jsDoc')) {
                    break;
                }
                if (typescript_1.isInterfaceDeclaration(node) && node.name) {
                    var interfaceDoc = classes_1.getClassLikeDoc(node, source, exports.getLineAndPosition(lines));
                    interfaceDoc.type = 'interface';
                    docs.push(interfaceDoc);
                    return;
                }
                if (!nest) {
                    return;
                }
                break;
            case typescript_1.SyntaxKind.ClassDeclaration:
                if (helpers_1.has(node, 'jsDoc')) {
                    break;
                }
                if (typescript_1.isClassDeclaration(node) && node.name) {
                    var classDoc = classes_1.getClassLikeDoc(node, source, exports.getLineAndPosition(lines));
                    classDoc.type = 'class';
                    docs.push(classDoc);
                }
                if (!nest) {
                    return;
                }
                break;
            case typescript_1.SyntaxKind.ExpressionStatement:
                if (helpers_1.has(node, 'expression')) {
                    var expression = node.expression;
                    if (expression &&
                        helpers_1.has(expression, 'left') &&
                        helpers_1.has(expression, 'right')) {
                        var right = expression.right;
                        if (helpers_1.has(right, 'parameters')) {
                            var doc = expressions_1.getVariableDocFromExpression(expression, source);
                            doc.type = 'function';
                            docs.push(doc);
                        }
                        if (!nest) {
                            return;
                        }
                    }
                }
                break;
        }
        typescript_1.forEachChild(node, visit);
    };
    visit(source);
    return docs;
};
exports.parse = parse;
