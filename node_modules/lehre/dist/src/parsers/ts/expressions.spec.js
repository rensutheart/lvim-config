"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = require("typescript");
var expressions_1 = require("./expressions");
var getAst = function (code) {
    var source = typescript_1.createSourceFile('lehre.ts', code, typescript_1.ScriptTarget.ESNext, false, typescript_1.ScriptKind.TS);
    var statement = source.statements[0];
    return expressions_1.getVariableDocFromExpression(statement.expression, source);
};
describe('expressions', function () {
    it('getVariableDocFromExpression', function () {
        var code = "foo = () => {}";
        var ast = getAst(code);
        var start = { line: 0, column: 0 };
        var end = { line: 0, column: 14 };
        expect(ast).toEqual({
            name: 'foo',
            type: 'function',
            start: start,
            end: end,
            params: [],
            returnType: '',
        });
    });
    it('getVariableDoc with args', function () {
        var code = "foo = (arg1: string, arg2: number) => {}";
        var ast = getAst(code);
        var start = { line: 0, column: 0 };
        var end = { line: 0, column: 40 };
        expect(ast).toEqual({
            name: 'foo',
            type: 'function',
            start: start,
            end: end,
            params: [
                {
                    name: 'arg1',
                    type: 'string',
                    default: '',
                    alias: 'string',
                },
                {
                    name: 'arg2',
                    type: 'number',
                    default: '',
                    alias: 'number',
                },
            ],
            returnType: '',
        });
    });
    it('getFunctionDoc with return type', function () {
        var code = "foo = (arg1: string, arg2: number): number => {}";
        var ast = getAst(code);
        var start = { line: 0, column: 0 };
        var end = { line: 0, column: 48 };
        expect(ast).toEqual({
            name: 'foo',
            type: 'function',
            start: start,
            end: end,
            params: [
                {
                    name: 'arg1',
                    type: 'string',
                    default: '',
                    alias: 'string',
                },
                {
                    name: 'arg2',
                    type: 'number',
                    default: '',
                    alias: 'number',
                },
            ],
            returnType: 'number',
        });
    });
    it('getVariableDoc with default parameter', function () {
        var code = "foo = (arg1: string = 'foo', arg2: number = 100): number => {}";
        var ast = getAst(code);
        var start = { line: 0, column: 0 };
        var end = { line: 0, column: 62 };
        expect(ast).toEqual({
            name: 'foo',
            type: 'function',
            start: start,
            end: end,
            params: [
                {
                    name: 'arg1',
                    type: 'string',
                    default: "'foo'",
                    alias: 'string',
                },
                {
                    name: 'arg2',
                    type: 'number',
                    default: '100',
                    alias: 'number',
                },
            ],
            returnType: 'number',
        });
    });
    it('getVariableDoc with alias', function () {
        var code = "foo = (arg1: string, arg2: { foo: number }) => {}";
        var ast = getAst(code);
        var start = { line: 0, column: 0 };
        var end = { line: 0, column: 49 };
        expect(ast).toEqual({
            name: 'foo',
            type: 'function',
            start: start,
            end: end,
            params: [
                {
                    name: 'arg1',
                    type: 'string',
                    default: '',
                    alias: 'string',
                },
                {
                    name: 'arg2',
                    type: '{ foo: number }',
                    default: '',
                    alias: 'Object',
                },
            ],
            returnType: '',
        });
    });
});
