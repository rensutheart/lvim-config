"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getParameter = exports.getTypeFromKind = void 0;
var typescript_1 = require("typescript");
var helpers_1 = require("../helpers");
var getTypeFromKind = function (kind) {
    switch (kind) {
        case typescript_1.SyntaxKind.StringKeyword:
            return 'string';
        case typescript_1.SyntaxKind.NumberKeyword:
            return 'number';
        case typescript_1.SyntaxKind.BooleanKeyword:
            return 'boolean';
        case typescript_1.SyntaxKind.AnyKeyword:
            return 'any';
        case typescript_1.SyntaxKind.ObjectBindingPattern:
        case typescript_1.SyntaxKind.TypeLiteral:
            return 'Object';
        case typescript_1.SyntaxKind.ArrayBindingPattern:
            return 'Array';
        case typescript_1.SyntaxKind.FunctionType:
            return 'Function';
        case typescript_1.SyntaxKind.ConstructorType:
            return 'Class';
        default:
            return '';
    }
};
exports.getTypeFromKind = getTypeFromKind;
var getParameter = function (node, source) {
    var param = {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        name: node.name.escapedText || '',
        type: '',
        default: '',
        alias: '',
    };
    if (helpers_1.has(node, 'type') && node.type) {
        // Type exists
        switch (node.type.kind) {
            case typescript_1.SyntaxKind.TypeLiteral:
                param.type = node.type.getText(source);
                param.alias = 'Object';
                break;
            case typescript_1.SyntaxKind.TypeReference:
                param.type = node.type.typeName.getText(source);
                break;
            case typescript_1.SyntaxKind.UnionType:
            case typescript_1.SyntaxKind.ArrayType:
                param.type = node.type.getText(source);
                break;
            default:
                param.type = node.type.getText(source);
                param.alias = exports.getTypeFromKind(node.type.kind);
                break;
        }
    }
    if (helpers_1.has(node, 'initializer') && node.initializer) {
        // Default keyword argument exists
        param.default = node.initializer.getText(source);
    }
    return param;
};
exports.getParameter = getParameter;
