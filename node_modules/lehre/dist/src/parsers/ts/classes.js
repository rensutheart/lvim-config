"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClassLikeDoc = void 0;
var typescript_1 = require("typescript");
var parameters_1 = require("./parameters");
var helpers_1 = require("../helpers");
var getClassLikeDoc = function (node, source, getLineAndPosition) {
    var start = source.getLineAndCharacterOfPosition(node.getStart(source));
    var end = source.getLineAndCharacterOfPosition(node.getEnd());
    var classDoc = {
        name: node.name ? node.name.text : '',
        type: '',
        start: { line: start.line, column: start.character },
        end: { line: end.line, column: end.character },
        methods: [],
        heritageClauses: [],
    };
    switch (node.kind) {
        case typescript_1.SyntaxKind.InterfaceDeclaration:
            classDoc.type = 'interface';
            break;
        case typescript_1.SyntaxKind.ClassDeclaration:
            classDoc.type = 'class';
            break;
    }
    if (node.heritageClauses) {
        var heritageClauses = node.heritageClauses.map(function (n) {
            var value = n.getText(source);
            var values = value.split(' ');
            if (values.length >= 3) {
                return { type: values[0], value: values.slice(1).join(' ') };
            }
            return { type: values[0], value: values[1] };
        });
        classDoc.heritageClauses = heritageClauses;
    }
    var members = node.members;
    classDoc.methods = members.map(function (member) {
        var position = source.getLineAndCharacterOfPosition(member.getStart(source));
        var start = getLineAndPosition(position.line);
        var end = source.getLineAndCharacterOfPosition(member.getEnd());
        var doc = {
            name: '',
            type: 'function',
            start: start,
            end: { line: end.line, column: end.character },
            params: [],
            returnType: '',
        };
        switch (member.kind) {
            case typescript_1.SyntaxKind.Constructor:
                doc.name = 'constructor';
                break;
            case typescript_1.SyntaxKind.PropertySignature:
            case typescript_1.SyntaxKind.PropertyDeclaration:
                doc.name = member.name.escapedText.toString();
                if (helpers_1.has(member, 'initializer')) {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    var initializer = member.initializer;
                    if (initializer && helpers_1.has(initializer, 'parameters')) {
                        // method with arrow function
                        //
                        // class Foo {
                        //   method = (arg1: number): number => 1
                        // }
                        var parameters = initializer.parameters;
                        doc.params = parameters.map(function (p) {
                            return parameters_1.getParameter(p, source);
                        });
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        var type = initializer.type;
                        if (type) {
                            doc.returnType = type.getText(source);
                        }
                        break;
                    }
                }
                doc.type = 'property';
                break;
            case typescript_1.SyntaxKind.MethodDeclaration:
            case typescript_1.SyntaxKind.MethodSignature:
                doc.name = member.name.escapedText.toString();
                break;
        }
        if (helpers_1.has(member, 'parameters')) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var parameters = member
                .parameters;
            doc.params = parameters.map(function (p) {
                return parameters_1.getParameter(p, source);
            });
        }
        if (helpers_1.has(member, 'type')) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var type = member.type;
            if (type) {
                doc.returnType = type.getText(source);
            }
        }
        return doc;
    });
    return classDoc;
};
exports.getClassLikeDoc = getClassLikeDoc;
