"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var commander_1 = require("commander");
var main_1 = require("./main");
var package_json_1 = require("../package.json");
var getIgnores = function (ignores) {
    return ignores.split(',');
};
var program = new commander_1.Command();
program
    .version(package_json_1.version, '-v, --version')
    .option('-t, --target-file [path]', 'Path to target file.')
    .option('-d, --target-dir [path]', 'Path to target directory.')
    .option('--stdin', 'Force reading input from STDIN')
    .option('--write', 'Edit files in-place')
    .option('--template-path [path]', 'Custom formatter path')
    .option('--ignores [path]', 'Ignore directory names')
    .option('--ignore-patterns [patterns]', 'Ignore patterns')
    .option('--parser [target]', 'Parser', /^(ts|babel)$/, 'ts')
    .option('--style [style]', 'Output style(string | json)', /^(string|json)$/, 'string')
    .option('--nest', 'Enable to generate inner document(only parser=ts available)')
    .option('--scriptTarget [target]', '[ES3 | ES5 | ES2015 | ES2016 | ES2017 | ES2018 | ES2019 | ESNext]', /^(ES3|ES5|ES2015|ES2016|ES2017|ES2018|ES2019|ESNext)$/, 'ESNext')
    .option('--scriptKind [kind]', '[JS | JSX | TS | TSX]', /^(JS|JSX|TS|TSX)$/, 'TS')
    .option('--formatter [formatter]', 'Document formatter(jsdoc | esdoc | tsdoc)', /^(jsdoc|esdoc|tsdoc)$/, 'jsdoc')
    .parse(process.argv);
var options = program.opts();
var config = {
    parser: options.parser,
    targetDir: options.targetDir || '',
    targetFile: options.targetFile || '',
    formatter: options.formatter,
    isStdin: options.stdin || false,
    templatePath: options.templatePath || '',
    style: options.style,
    ignores: getIgnores(options.ignores || ''),
    ignorePatterns: options.ignorePatterns || '',
    nest: options.nest || false,
    write: options.write || false,
    scriptTarget: options.scriptTarget,
    scriptKind: options.scriptKind,
};
main_1.main(config)
    .then(function (data) {
    if (data) {
        data.forEach(function (d) {
            if (d) {
                process.stdout.write(d);
            }
        });
    }
})
    .catch(function (e) {
    console.log(e); // eslint-disable-line no-console
    process.exit(1);
});
