"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = exports.run = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var outputters_1 = require("./outputters");
var babel_1 = require("./parsers/babel");
var ts_1 = require("./parsers/ts");
var formatters_1 = require("./formatters");
var walk = function (dir, allFiles, ignores, ignorePatterns) {
    if (allFiles === void 0) { allFiles = []; }
    if (ignores === void 0) { ignores = []; }
    if (ignorePatterns === void 0) { ignorePatterns = ''; }
    var d = path_1.default.basename(dir);
    if (ignores.includes(d)) {
        return;
    }
    var files = fs_1.default
        .readdirSync(dir)
        .map(function (f) { return path_1.default.join(dir, f); })
        .filter(function (f) {
        if (ignorePatterns === '') {
            return true;
        }
        if (new RegExp(ignorePatterns).exec(f)) {
            return false;
        }
        return true;
    });
    allFiles.push.apply(allFiles, files);
    files.forEach(function (f) {
        if (fs_1.default.statSync(f).isDirectory()) {
            walk(f, allFiles, ignores, ignorePatterns);
        }
    });
};
var getCodeFromStdin = function () {
    // https://github.com/nodejs/node/blob/master/doc/api/process.md#processstdin
    return new Promise(function (resolve) {
        var contents = [];
        process.stdin.setEncoding('utf8');
        process.stdin.on('data', function (chunk) {
            contents.push(chunk);
        });
        process.stdin.on('end', function () {
            resolve(contents.join('\n'));
        });
    });
};
var getCodeFromFile = function (targetFile) {
    var targetPath = path_1.default.resolve(targetFile);
    return fs_1.default.readFileSync(targetPath, { encoding: 'utf-8' });
};
var isValidExt = function (ext) {
    switch (ext) {
        case '.ts':
        case '.tsx':
        case '.js':
        case '.mjs':
            return true;
    }
    return false;
};
var getTargetFiles = function (targetDir, ignores, ignorePatterns) {
    var dirs = [];
    walk(path_1.default.resolve(targetDir), dirs, ignores, ignorePatterns);
    return dirs.filter(function (dir) { return isValidExt(path_1.default.extname(dir)); });
};
var run = function (parser, code, filePath, templatePath, nest, outputFn, options) {
    if (!code) {
        return '';
    }
    var lines = code.split('\n');
    var parse = parser === 'babel' ? babel_1.parse : ts_1.parse;
    var docs = parse({
        code: code,
        lines: lines,
        nest: nest,
        scriptTarget: options.scriptTarget,
        scriptKind: options.scriptKind,
    });
    var results = formatters_1.generateDocs(templatePath, docs);
    return outputFn({ lines: lines, docs: results, filePath: filePath });
};
exports.run = run;
var main = function (config) { return __awaiter(void 0, void 0, void 0, function () {
    var targets, targetDir, ignores, ignorePatterns, files, templatePath, outputFn, options, outputs, _a, _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                targets = [];
                if (config.targetDir) {
                    targetDir = config.targetDir, ignores = config.ignores, ignorePatterns = config.ignorePatterns;
                    files = getTargetFiles(targetDir, ignores, ignorePatterns);
                    files.forEach(function (f) { return targets.push(f); });
                }
                else {
                    if (config.targetFile && isValidExt(path_1.default.extname(config.targetFile))) {
                        targets.push(config.targetFile);
                    }
                }
                if (!config.isStdin && targets.length === 0) {
                    return [2 /*return*/, []];
                }
                templatePath = config.templatePath === ''
                    ? formatters_1.getFormatterPath(config.formatter)
                    : path_1.default.resolve(config.templatePath);
                outputFn = config.write && config.isStdin === false
                    ? outputters_1.fileOutputter
                    : config.style === 'string'
                        ? outputters_1.stringOutputter
                        : outputters_1.jsonOutputter;
                options = {
                    scriptKind: config.scriptKind,
                    scriptTarget: config.scriptTarget,
                };
                if (!config.isStdin) return [3 /*break*/, 2];
                _b = exports.run;
                _c = [config.parser];
                return [4 /*yield*/, getCodeFromStdin()];
            case 1:
                _a = [
                    _b.apply(void 0, _c.concat([_d.sent(), '',
                        templatePath,
                        config.nest,
                        outputFn,
                        options]))
                ];
                return [3 /*break*/, 3];
            case 2:
                _a = targets.map(function (filePath) {
                    var code = getCodeFromFile(filePath);
                    return exports.run(config.parser, code, filePath, templatePath, config.nest, outputFn, options);
                });
                _d.label = 3;
            case 3:
                outputs = _a;
                return [2 /*return*/, outputs];
        }
    });
}); };
exports.main = main;
