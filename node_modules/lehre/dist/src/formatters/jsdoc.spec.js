"use strict";
describe('jsdoc', function () {
    var _a = require('./jsdoc'), generateClassDoc = _a.generateClassDoc, generateFunctionDoc = _a.generateFunctionDoc, generateInterfaceDoc = _a.generateInterfaceDoc, generatePropertyDoc = _a.generatePropertyDoc; // eslint-disable-line @typescript-eslint/no-var-requires
    it('generateClassDoc', function () {
        var params = {
            name: 'Foo',
            type: '',
            start: { line: 0, character: 0 },
            end: { line: 1, character: 0 },
            methods: [],
            heritageClauses: [],
        };
        var doc = generateClassDoc(params);
        var docs = doc.split('\n');
        expect(docs).toEqual(['/**', ' * Foo.', ' */']);
    });
    it('generateClassDoc with extends', function () {
        var params = {
            name: 'Foo',
            type: '',
            start: { line: 0, character: 0 },
            end: { line: 1, character: 0 },
            methods: [],
            heritageClauses: [{ type: 'extends', value: 'Base' }],
        };
        var doc = generateClassDoc(params);
        var docs = doc.split('\n');
        expect(docs).toEqual(['/**', ' * Foo.', ' *', ' * @extends {Base}', ' */']);
    });
    it('generateClassDoc with implements', function () {
        var params = {
            name: 'Foo',
            type: '',
            start: { line: 0, character: 0 },
            end: { line: 1, character: 0 },
            methods: [],
            heritageClauses: [{ type: 'implements', value: 'Base' }],
        };
        var doc = generateClassDoc(params);
        var docs = doc.split('\n');
        expect(docs).toEqual([
            '/**',
            ' * Foo.',
            ' *',
            ' * @implements {Base}',
            ' */',
        ]);
    });
    it('generateClassDoc with implements and extends', function () {
        var params = {
            name: 'Foo',
            type: '',
            start: { line: 0, character: 0 },
            end: { line: 1, character: 0 },
            methods: [],
            heritageClauses: [
                { type: 'implements', value: 'Base' },
                { type: 'extends', value: 'BaseClass' },
            ],
        };
        var doc = generateClassDoc(params);
        var docs = doc.split('\n');
        expect(docs).toEqual([
            '/**',
            ' * Foo.',
            ' *',
            ' * @implements {Base}',
            ' * @extends {BaseClass}',
            ' */',
        ]);
    });
    it('generateInterfaceDoc', function () {
        var params = {
            name: 'Foo',
            type: '',
            start: { line: 0, character: 0 },
            end: { line: 1, character: 0 },
            methods: [],
            heritageClauses: [],
        };
        var doc = generateInterfaceDoc(params);
        var docs = doc.split('\n');
        expect(docs).toEqual(['/**', ' * Foo.', ' */']);
    });
    it('generateInterfaceDoc with extends', function () {
        var params = {
            name: 'Foo',
            type: '',
            start: { line: 0, character: 0 },
            end: { line: 1, character: 0 },
            methods: [],
            heritageClauses: [{ type: 'extends', value: 'Base' }],
        };
        var doc = generateInterfaceDoc(params);
        var docs = doc.split('\n');
        expect(docs).toEqual(['/**', ' * Foo.', ' *', ' * @extends {Base}', ' */']);
    });
    it('generatePropertyDoc', function () {
        var params = {
            name: 'foo',
            returnType: '',
            start: { line: 0, character: 0 },
            end: { line: 1, character: 0 },
            params: [],
        };
        var doc = generatePropertyDoc(params);
        var docs = doc.split('\n');
        expect(docs).toEqual(['/**', ' * @type {}', ' */']);
    });
    it('generatePropertyDoc with type', function () {
        var params = {
            name: 'foo',
            returnType: 'string',
            start: { line: 0, character: 0 },
            end: { line: 1, character: 0 },
            params: [],
        };
        var doc = generatePropertyDoc(params);
        var docs = doc.split('\n');
        expect(docs).toEqual(['/**', ' * @type {string}', ' */']);
    });
    it('generateFunctionDoc', function () {
        var params = {
            name: 'foo',
            returnType: '',
            start: { line: 0, character: 0 },
            end: { line: 1, character: 0 },
            params: [],
        };
        var doc = generateFunctionDoc(params);
        var docs = doc.split('\n');
        expect(docs).toEqual(['/**', ' * foo.', ' */']);
    });
    it('generateFunctionDoc with return type', function () {
        var params = {
            name: 'foo',
            returnType: 'string',
            start: { line: 0, character: 0 },
            end: { line: 1, character: 0 },
            params: [],
        };
        var doc = generateFunctionDoc(params);
        var docs = doc.split('\n');
        expect(docs).toEqual([
            '/**',
            ' * foo.',
            ' *',
            ' * @returns {string}',
            ' */',
        ]);
    });
    it('generateFunctionDoc with param', function () {
        var params = {
            name: 'foo',
            returnType: '',
            start: { line: 0, character: 0 },
            end: { line: 1, character: 0 },
            params: [
                {
                    name: 'arg1',
                    type: 'string',
                    default: '',
                    alias: 'string',
                },
            ],
        };
        var doc = generateFunctionDoc(params);
        var docs = doc.split('\n');
        expect(docs).toEqual([
            '/**',
            ' * foo.',
            ' *',
            ' * @param {string} arg1',
            ' */',
        ]);
    });
    it('generateFunctionDoc with params', function () {
        var params = {
            name: 'foo',
            returnType: '',
            start: { line: 0, character: 0 },
            end: { line: 1, character: 0 },
            params: [
                {
                    name: 'arg1',
                    type: 'string',
                    default: '',
                    alias: 'string',
                },
                {
                    name: 'arg2',
                    type: 'number',
                    default: '',
                    alias: 'number',
                },
            ],
        };
        var doc = generateFunctionDoc(params);
        var docs = doc.split('\n');
        expect(docs).toEqual([
            '/**',
            ' * foo.',
            ' *',
            ' * @param {string} arg1',
            ' * @param {number} arg2',
            ' */',
        ]);
    });
    it('generateFunctionDoc with params and return type', function () {
        var params = {
            name: 'foo',
            returnType: 'number',
            start: { line: 0, character: 0 },
            end: { line: 1, character: 0 },
            params: [
                {
                    name: 'arg1',
                    type: 'string',
                    default: '',
                    alias: 'string',
                },
                {
                    name: 'arg2',
                    type: 'number',
                    default: '',
                    alias: 'number',
                },
            ],
        };
        var doc = generateFunctionDoc(params);
        var docs = doc.split('\n');
        expect(docs).toEqual([
            '/**',
            ' * foo.',
            ' *',
            ' * @param {string} arg1',
            ' * @param {number} arg2',
            ' * @returns {number}',
            ' */',
        ]);
    });
    it('generateFunctionDoc with ailas param', function () {
        var params = {
            name: 'foo',
            returnType: 'number',
            start: { line: 0, character: 0 },
            end: { line: 1, character: 0 },
            params: [
                {
                    name: 'arg1',
                    type: '{ arg1: string }',
                    default: '',
                    alias: 'Object',
                },
            ],
        };
        var doc = generateFunctionDoc(params);
        var docs = doc.split('\n');
        expect(docs).toEqual([
            '/**',
            ' * foo.',
            ' *',
            ' * @param {Object} arg1',
            ' * @returns {number}',
            ' */',
        ]);
    });
});
