"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateDocs = exports.getFormatterPath = void 0;
var path_1 = __importDefault(require("path"));
var getFormatterPath = function (formatter) {
    return path_1.default.resolve(path_1.default.join(__dirname, "./" + formatter));
};
exports.getFormatterPath = getFormatterPath;
var formatIndent = function (doc, indent) {
    if (indent === 0) {
        return doc;
    }
    var docs = doc.split('\n');
    return docs.map(function (d) { return "" + ' '.repeat(indent) + d; }).join('\n');
};
var generateDocs = function (templatePath, docs) {
    var _a = require(templatePath), generateClassDoc = _a.generateClassDoc, generateFunctionDoc = _a.generateFunctionDoc, generateInterfaceDoc = _a.generateInterfaceDoc, generatePropertyDoc = _a.generatePropertyDoc; // eslint-disable-line @typescript-eslint/no-var-requires
    var results = [];
    docs.forEach(function (doc) {
        switch (doc.type) {
            case 'class':
            case 'interface':
                var fn = doc.type === 'class' ? generateClassDoc : generateInterfaceDoc;
                if (typeof fn === 'undefined') {
                    break;
                }
                results.push({
                    doc: formatIndent(fn(doc), doc.start.column),
                    start: doc.start,
                    end: doc.end,
                    type: doc.type,
                });
                doc.methods &&
                    doc.methods.forEach(function (method) {
                        var fn = method.type === 'function'
                            ? generateFunctionDoc
                            : generatePropertyDoc;
                        if (typeof fn === 'undefined') {
                            return;
                        }
                        results.push({
                            doc: formatIndent(fn(method), method.start.column),
                            start: method.start,
                            end: method.end,
                            type: method.type,
                        });
                    });
                break;
            case 'function':
            case 'variable':
                if (typeof generateFunctionDoc === 'undefined') {
                    break;
                }
                results.push({
                    doc: formatIndent(generateFunctionDoc(doc), doc.start.column),
                    start: doc.start,
                    end: doc.end,
                    type: doc.type,
                });
                break;
        }
    });
    return results;
};
exports.generateDocs = generateDocs;
